name: "Technical Debt ID CI/CD"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    env:
      dotNetVersion: net6
      dotNetConfiguration: Release
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 #fetch-depth is needed for GitVersion
        
    #Install and calculate the new version with GitVersion  
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'
    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.7
      id: gitversion # step id used as reference for output values
    - name: Display GitVersion outputs
      run: |
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
           
    #Build and test service   
    - name: Setup .NET 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x  
    - name: Variable Substitution appsettings file for tests
      uses: microsoft/variable-substitution@v1
      with:
        files: 'src/TechDebtID.Tests/appsettings.json'
      env:
        AzureStorageConnectionString: "${{ secrets.AzureStorageConnectionString }}"   
    - name: Run automated unit and integration tests
      run: dotnet test src/TechDebtID.Tests/TechDebtID.Tests.csproj --configuration ${{ env.dotNetConfiguration }} /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov
    - name: Publish coverage report to coveralls.io
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: src/TechDebtID.Tests/TestResults/coverage.info 

    #Publish console app
    - name: publish console app
      run: dotnet publish src/TechDebtID.App/TechDebtID.App.csproj --configuration ${{ env.dotNetConfiguration }} /p:AssemblyVersion=${{ steps.gitversion.outputs.majorMinorPatch }} /p:Version=${{ steps.gitversion.outputs.majorMinorPatch }}
    #Publish build artifacts to GitHub
    - name: Upload build artifacts back to GitHub
      uses: actions/upload-artifact@master
      with:
        name: app
        path: src/TechDebtID/bin/${{ env.dotNetConfiguration }}/${{ env.dotNetVersion }}/

  NuGetPush:
    runs-on: ubuntu-latest
    needs: build
    #if: github.ref == 'refs/heads/main'      
    steps:
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ needs.build.outputs.Version }}" 
        echo "CommitsSinceVersionSource: ${{ needs.build.outputs.CommitsSinceVersionSource }}" 
    - name: Download nuget package artifact
      uses: actions/download-artifact@v2.1.0
      with:
        name: nugetPackage 
        path: nugetPackage
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x   
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only create a release if there has been a commit/version change
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ needs.build.outputs.Version }}
        release_name: Release ${{ needs.build.outputs.Version }}
    - name: Publish nuget package to nuget.org
      if: 0 == 1 && needs.build.outputs.CommitsSinceVersionSource > 0 #Only publish a NuGet package if there has been a commit/version change
      run: dotnet nuget push nugetPackage\*.nupkg --api-key "${{ secrets.GHPackagesToken }}" --source "https://api.nuget.org/v3/index.json"
      shell: pwsh
